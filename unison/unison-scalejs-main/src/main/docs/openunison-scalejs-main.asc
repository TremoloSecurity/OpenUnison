= Tremolo Security ScaleJS Configuration & Deployment
Tremolo Security, Inc
v1.0.6, 2016-03-21
:toc: left
:source-highlighter: coderay

Copyright 2015-2016, Tremolo Security, Inc.

== Introduction

ScaleJS is an https://angularjs.org/[AngularJS] version of Scale.  ScaleJS provides the same general functions, however has
a several advantages over the J2EE version of Scale:

* ScaleJS is hosted on Unison, so need for a second set of services for Scale
* ScaleJS is a single page application, so faster page loads and a more responsive interface
* ScaleJS uses RESTfully compliant web services, so even if you don't want to use the ScaleJS interface you can use these web services in your own applications
* ScaleJS doesn't require TLS authentication, it uses the same session as the logged in user

This document will take you through the process of deploying the main ScaleJS application into OpenUnison.  Deploying ScaleJS into commercial Unison is covered in the Unison documentation.
The main application provides:

* User updates
* Dynamic portal links
* Access requests & approvals
* Reports

== Design

ScaleJS has two components outside of Unison:

1. Unison HttpFilter implementation for all web services
2. AngularJS application that interacts with those web services

Unlike the J2EE version of Scale, ScaleJS doesn't require its own server.  It can sit right on OpenUnison.  This means no service accounts,
the user accesses all pages and services directly through their browser and with their own credentials.

== Deployment

=== Prerequisites

1.  OpenUnison has been deployed following the Maven based directions for the reverse proxy
2.  While using the reverse proxy based overlay, the provisioning services (auditDB, queue, scheduler, etc) have been configured
3.  Download the latest ScaleJS HTML from http://tremolo.io

=== Deployment Steps

==== Update Your Maven Project

In your OpenUnison project's pom.xml, add the following dependency:

[source,xml]
----
<dependency>
  <groupId>com.tremolosecurity.unison</groupId>
  <artifactId>unison-scalejs-main</artifactId>
  <version>1.0.6</version>
  <type>jar</type>
</dependency>
----

==== Add ScaleJS files

Copy the application files into a directory.  For the rest of this tutorial we will assume the directory is called "/scale".  NOTE: all needed files are included, there's no
need for ScaleJS to request additional files over the internet.

==== Create an application

Add an application to unison.xml using the following template:

[source,xml]
----
<application name="Scale" azTimeoutMillis="30000">
  <urls>
    <!-- Protect the html files -->
    <url regex="false" authChain="Default Login Form" overrideHost="true" overrideReferer="true">
      <host>openunison.azure.cloud</host>
      <filterChain>
      </filterChain>
      <uri>/scale</uri>
      <results>
        <auFail>Invalid Login</auFail>
        <azSuccess>
        </azSuccess>
        <azFail>Invalid Login</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>


    <!-- Web services configuration -->
    <url regex="false" authChain="adfs" overrideHost="false" overrideReferer="false">
      <host>openunison.azure.cloud</host>
      <filterChain>
        <filter class="com.tremolosecurity.scalejs.ws.ScaleMain">
          <!-- The name of the attribute that stores the value to be displayed when referencing the currently logged in user, ie cn or displayName -->
          <param name="displayNameAttribute" value="displayName"/>

          <!-- The title to show on the home page -->
          <param name="frontPage.title" value="Azure Cloud Linux Management"/>

          <!-- Sub text for the home page -->
          <param name="frontPage.text" value="Use this portal as the gateway for accessing your linux servers and requesting access to systems."/>

          <!-- Determines if a user can be edited -->
          <param name="canEditUser" value="true"/>

          <!-- The name of the workflow to run when a user submits an update request -->
          <param name="workflowName" value="ipa-update-sshkey"/>

          <!-- For each attribute, define an attributeNames, displayName, readOnly -->
          <param name="attributeNames" value="uid"/>
          <param name="uid.displayName" value="Login ID"/>
          <param name="uid.readOnly" value="true"/>


          <param name="attributeNames" value="sn"/>
          <param name="sn.displayName" value="Last Name"/>
          <param name="sn.readOnly" value="true"/>

          <param name="attributeNames" value="givenName"/>
          <param name="givenName.displayName" value="First Name"/>
          <param name="givenName.readOnly" value="true"/>

          <param name="attributeNames" value="displayName"/>
          <param name="displayName.displayName" value="Display Name"/>
          <param name="displayName.readOnly" value="true"/>

          <!-- if an attribute is editable, determine if its required -->
          <param name="attributeNames" value="ipaSshPubKey"/>
          <param name="ipaSshPubKey.displayName" value="SSH Public Key"/>
          <param name="ipaSshPubKey.readOnly" value="false"/>
          <param name="ipaSshPubKey.required" value="true"/>

          <param name="attributeNames" value="loginShell"/>
          <param name="loginShell.displayName" value="Login Shell"/>
          <param name="loginShell.readOnly" value="false"/>
          <param name="loginShell.required" value="true"/>

          <!-- The name of the attribute that identifies the user uniquely -->
          <param name="uidAttributeName" value="uid"/>

          <!-- An attribute that specifies which roles a user is a member of.  If left blank, then the user's DN in the virtual directory is compared against memberOf attributes -->
          <param name="roleAttribute" value=""/>

          <!-- List of attributes to include in the approval screen -->
          <param name="approvalAttributeNames" value="uid"/>
          <param name="approvalAttributeNames" value="givenName"/>
          <param name="approvalAttributeNames" value="sn"/>
          <param name="approvalAttributeNames" value="mail"/>
          <param name="approvalAttributeNames" value="displayName"/>

          <!-- Labels for each of the attributes -->
          <param name="approvals.uid" value="Login ID"/>
          <param name="approvals.givenName" value="First Name"/>
          <param name="approvals.sn" value="Last Name"/>
          <param name="approvals.mail" value="Email Address"/>
          <param name="approvals.displayName" value="Display Name"/>

          <!-- If set to true, the organization tree is shown on the main page, helpful when there are numerous links to organize them by organization -->
          <param name="showPortalOrgs" value="false"/>

          <!-- The URL to redirect the user to when they logout -->
          <param name="logoutURL" value="/logout"/>
        </filter>
      </filterChain>
      <uri>/scale/main</uri>
      <results>
        <auSuccess>
        </auSuccess>
        <auFail>
        </auFail>
        <azSuccess>
        </azSuccess>
        <azFail>
        </azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>

    <url regex="false" authChain="adfs" overrideHost="true" overrideReferer="true">
      <host>openunison.azure.cloud</host>
      <filterChain>
        <filter class="com.tremolosecurity.prelude.filters.StopProcessing"/>
      </filterChain>
      <uri>/logout</uri>
      <proxyTo>http://dnm${fullURI}</proxyTo>
      <results>
        <azSuccess>Logout</azSuccess>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>
  </urls>
  <cookieConfig>
    <sessionCookieName>tremolosession</sessionCookieName>
    <domain>azure.cloud</domain>
    <scope>-1</scope>
    <logoutURI>/logout</logoutURI>
    <keyAlias>session-unison</keyAlias>
    <secure>false</secure>
    <timeout>900</timeout>
  </cookieConfig>
</application>
----

== Web Services Descriptions

All URLs assume that scale's filter is deployed to /scale/main.

=== Get Configuration

|=======================
|Purpose|Retrieves the configuration for ScaleJS
|URI|/scale/main/config
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "displayNameAttribute": "displayName",
  "uidAttributeName": "uid",
  "frontPage": {
    "title": "Azure Cloud Linux Management",
    "text": "Use this portal as the gateway for accessing your linux servers and requesting access to systems."
  },
  "canEditUser": true,
  "showPortalOrgs": false,
  "logoutURL": "\/logout",
  "attributes": {
    "ipaSshPubKey": {
      "name": "ipaSshPubKey",
      "displayName": "SSH Public Key",
      "readOnly": false,
      "required": true,
      "minChars": 0,
      "maxChars": 0
    },
    "uid": {
      "name": "uid",
      "displayName": "Login ID",
      "readOnly": true,
      "required": false,
      "minChars": 0,
      "maxChars": 0
    },
    "loginShell": {
      "name": "loginShell",
      "displayName": "Login Shell",
      "readOnly": false,
      "required": true,
      "minChars": 0,
      "maxChars": 0
    },
    "displayName": {
      "name": "displayName",
      "displayName": "Display Name",
      "readOnly": true,
      "required": false,
      "minChars": 0,
      "maxChars": 0
    },
    "givenName": {
      "name": "givenName",
      "displayName": "First Name",
      "readOnly": true,
      "required": false,
      "minChars": 0,
      "maxChars": 0
    },
    "sn": {
      "name": "sn",
      "displayName": "Last Name",
      "readOnly": true,
      "required": false,
      "minChars": 0,
      "maxChars": 0
    }
  },
  "roleAttribute": ""
}
----

=== Get User

|=======================
|Purpose|Retrieves the configured user attributes for the logged in user
|URI|/scale/main/user
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "uid": "mmosley",
  "dn": "uid=mmosley,cn=users,ou=azure.cloud,o=Tremolo",
  "attributes": [
    {
      "values": [
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTcmV5wGw6KDIAp0HiFh7VRESjAdPKpomGelOQC+Z\/2E5K+l6tfU3NOz6HXsyBreqx60ngEdRoN0u9lBToDpIyMchF6rQFYup8sECIZOEM5rm+qdwHD6UE1vogp9suNO9MNNpCXPAIK5wNJQS8BpHCX+bqHWjIdWB6OqmjQwCfvCQ5fgfAE9oTVrDCtS4Vv8NdkHcy8JIUH+I+02misDlXXURxksE12dl1MhKG4ZQrRJ3LH4c5ox2af\/\/N5q5QC3pmd0AgXWO1DdUfr0mzv2EW8G6ArCqhnjcs7zgJPLWhM+NW0NG5i29a2IlXP9Qzgg7\/shgqDRDxlYFue7x0Po2P mlb@Marcs-MBP.home"
      ],
      "name": "ipaSshPubKey"
    },
    {
      "values": [
        "mmosley"
      ],
      "name": "uid"
    },
    {
      "values": [
        "\/bin\/bash"
      ],
      "name": "loginShell"
    },
    {
      "values": [
        "Matthew Mosley"
      ],
      "name": "displayName"
    },
    {
      "values": [
        "Matt"
      ],
      "name": "givenName"
    },
    {
      "values": [
        "Mosley"
      ],
      "name": "sn"
    }
  ],
  "groups": [
    "admins",
    "ipausers",
    "sudoalls",
    "admin-approvers",
    "graylog-administrator"
  ]
}
----

=== Get Organizations

|=======================
|Purpose|Retrieves the organizations authorized for the logged in user
|URI|/scale/main/orgs
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "id": "687da09f-8ec1-48ac-b035-f2f182b9bd1e",
  "name": "MyOrg",
  "description": "MyOrg Azure Cloud",
  "subOrgs": [
    {
      "id": "e6b5b365-9dc4-47f4-803f-a1255cf31b57",
      "name": "Administrator Access",
      "description": "Various administrative roles",
      "subOrgs": [

      ]
    },
    {
      "id": "5d6bab30-9dd9-4cfd-8aff-a395fed377dc",
      "name": "Log Management",
      "description": "Log management roles",
      "subOrgs": [

      ]
    },
    {
      "id": "1c2cad5b-f62c-491c-84f3-068f6231f053",
      "name": "Identity Management Reports",
      "description": "Reports Available to Identity Management Admins",
      "subOrgs": [

      ]
    }
  ]
}
----

=== Get Workflows

|=======================
|Purpose|Retrieves the workflows for a given organizations id
|URI|/scale/main/workflows/org/ORGID where ORGID is the organization's ID
|Method|Get
|=======================

.Example Return
[source,json]
----
[
  {
    "name": "request-graylog-reader",
    "description": "View log data",
    "label": "Graylog Read Only"
  },
  {
    "name": "request-graylog-admin",
    "description": "Manage & Configure Graylog",
    "label": "Graylog Administrator"
  },
  {
    "name": "request-demogroup",
    "description": "Demo Things",
    "label": "Demo Group"
  }
]
----

=== Execute Workflows

|=======================
|Purpose|Execute a set of workflows as the user
|URI|/scale/main/workflows
|Method|Put
|=======================

.Example Request
[source,json]
----
[
  {
    "name": "request-demogroup",
    "reason": "test"
  }
]
----

.Example Return
[source,json]
----
{
  "request-demogroup": "success"
}
----

=== Get Approvals

|=======================
|Purpose|Retrieves the approvals for the current user
|URI|/scale/main/approvals
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "approvals": [
    {
      "workflow": 161,
      "approval": 16,
      "label": "Approve Graylog Administrator",
      "user": "mmosley",
      "wfStart": 1458780707723,
      "approvalStart": 1458780708160,
      "wfName": "request-demogroup",
      "wfDescription": "Demo Things",
      "wfLabel": "Demo Group",
      "reason": "test"
    }
  ]
}
----

=== Get Approval Details

|=======================
|Purpose|Retrieves the details for a given approval
|URI|/scale/main/approvals/APPROVALID where APPROVALID is the ID of the approval
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "userObj": {
    "userID": "mmosley",
    "groups": [
      "admins",
      "ipausers",
      "sudoalls",
      "admin-approvers",
      "graylog-administrator"
    ],
    "resync": false,
    "keepExternalAttrs": false,
    "JitAddToAuditDB": false,
    "requestReason": "test",
    "attribs": {
      "Display Name": {
        "values": [
          "Matthew Mosley"
        ],
        "name": "Display Name"
      },
      "Login ID": {
        "values": [
          "mmosley"
        ],
        "name": "Login ID"
      },
      "First Name": {
        "values": [
          "Matt"
        ],
        "name": "First Name"
      },
      "Last Name": {
        "values": [
          "Mosley"
        ],
        "name": "Last Name"
      },
      "Email Address": {
        "values": [
          "matt.mosley@tremolosecurity-test.com"
        ],
        "name": "Email Address"
      }
    }
  },
  "workflow": 161,
  "approval": 16,
  "label": "Approve Graylog Administrator",
  "user": "mmosley",
  "wfStart": 1458780707723,
  "approvalStart": 1458780708160,
  "wfName": "request-demogroup",
  "wfDescription": "Demo Things",
  "wfLabel": "Demo Group",
  "reason": "test"
}
----

=== Act on Approval Request

|=======================
|Purpose|Completes an approval request
|URI|/scale/main/approvals/APPROVALID where APPROVALID is the ID of the approval
|Method|Put
|=======================

.Example Request
[source,json]
----
{
  "reason": "test",
  "approved": true
}
----

=== List Reports for an Organization

|=======================
|Purpose|Retrieves the reports for a given organizations id
|URI|/scale/main/reports/org//ORGID where ORGID is the organization's ID
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "reports": [
    {
      "name": "Open Approvals",
      "description": "Lists all of the approvals that are currently waiting action",
      "parameters": [

      ],
      "orgID": "1c2cad5b-f62c-491c-84f3-068f6231f053"
    },
    {
      "name": "Completed Approvals",
      "description": "All approvals completed in a given set of dates",
      "parameters": [
        "beginDate",
        "endDate"
      ],
      "orgID": "1c2cad5b-f62c-491c-84f3-068f6231f053"
    },
    {
      "name": "Single User Change Log",
      "description": "All changes to the chosen user",
      "parameters": [
        "userKey"
      ],
      "orgID": "1c2cad5b-f62c-491c-84f3-068f6231f053"
    },
    {
      "name": "Change Log for Period",
      "description": "Changes to all users between the two selected dates",
      "parameters": [
        "beginDate",
        "endDate"
      ],
      "orgID": "1c2cad5b-f62c-491c-84f3-068f6231f053"
    }
  ]
}
----


=== Run Report

|=======================
|Purpose|Executes a report
|URI|/scale/main/reports/REPORT_NAME?beginDate=UnixTime&endDate=UnixTime&userKey=username where REPORT_NAME is the name of the report to execute
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "name": "Change Log for Period",
  "description": "Changes to all users between the two selected dates",
  "headerFields": [
    "Workflow Name",
    "Request Reason",
    "Workflow Started",
    "Workflow Completed",
    "First Name",
    "Last Name",
    "Email Address"
  ],
  "dataFields": [
    "Action",
    "Target Type",
    "Name",
    "Value"
  ],
  "grouping": [
    {
      "header": {
        "Workflow Started": "2016-03-15 00:59:47.64",
        "Request Reason": "",
        "Workflow Name": "ipa-jit",
        "Workflow Completed": "2016-03-15 00:59:56.0"
      },
      "data": [
        {
          "Action": "Replace",
          "Value": "********************************",
          "Target Type": "Attribute",
          "Name": "userPassword"
        }
      ]
    },
    {
      "header": {
        "Workflow Started": "2016-03-15 01:00:19.05",
        "Request Reason": "",
        "First Name": "Matt",
        "Workflow Name": "ipa-jit",
        "Workflow Completed": "2016-03-15 01:00:25.387",
        "Last Name": "Mosley",
        "Email Address": "matt.mosley@tremolosecurity-test.com"
      },
      "data": [
        {
          "Action": "Replace",
          "Value": "********************************",
          "Target Type": "Attribute",
          "Name": "userPassword"
        }
      ]
    }
  ]
}
----
