= Tremolo Security OpenUnison Configuration & Deployment
Tremolo Security, Inc
v1.0.6, 2015-06-20
:toc: left
:source-highlighter: coderay

Copyright 2015, Tremolo Security, Inc.

== Introduction
OpenUnison combines identity services that are most used by applications into
a single system:

* Authentication
* Session Management
* Identity Federation
* User Provisioning
* Access Request Management 

These services are provided by a J2EE application that can be deployed into
any servlet container.  

=== Web Access Manager
When deployed for web access management, OpenUnison is a reverse proxy, sitting
between your users and your web applications.  

image:images/unison-manual-rev-proxy.png[OpenUnison Reverse Proxy]

When a user attempts to access your web application, they'll allways go through
OpenUnison:

. User requests your application
. OpenUnison checks to see if the URL is protected
. If the URL is protected, OpenUnison will check to see if your are authenticated
  .. If you are authenticated, check if authentication level is valid
  .. If you aren't authenticated, or your authentication level isn't valid execute the authentication chain
. OpenUnison checks if you are authorized
. If authorized, OpenUnison can execute a series of filters to manipulate the request or response
. OpenUnison generates a Last Mile token that contains the user's attributes, nonce, time range and the request URI
. The request is sent your application
. The application, deployed with a Last Mile component, validates the Last Mile token and sets the user's context

The reverse proxy model offers several advantages over a typical agent model:

. Performance - Agents need to "phone home" to verify access
. Ease of development - Develoeprs can write applications "in a vacuum" and integrate later
. Ease of deployment - Last Mile components are lighter then typical agents
. Just-In-Time Provisioning - Create accounts in applications before they login 
  
=== User Provisioning System

In addition to web access management, OpenUnison provides a user provisioning system that can be used to build a private IDentity as a Service solution.  The APIs
provided by OpenUnison can be used directly by applications or in conjunction with Tremolo Security Scale to provide an interface for user registration, requesting access
to resources and approving access via workflows.  The data is recorded in an audit database that allows for reporting on who requested access to what and who approved the access.

image:images/scale_architecture.png[Scale and OpenUnison Architecture]

=== LDAP Virtual Directory

OpenUnison integrates MyVirtualDirectory as an internal LDAP Virtual Directory.  The provisioning services provide a limited search capability, but there's no LDAP interface provided.
The configurations used to power the embedded MyVirtualDirectory can be used in a stand alone MyVirtualDirectory server.

== Deploying OpenUnison

OpenUnison is packaged as a Maven web application that can be customized using Maven's overlay plugin.  This makes integration into any DevOps platform very easy, as out of the box
there are only 3 files that need to be created:

. unison.xml - The main OpenUnison configuration file
. unisonKeyStore.jks - The key store for OpenUnison
. myvd.conf - The MyVirtualDirectory configuration file

The is section details how to create these files and deploy them, but not their individual configurations.  The Configuration Reference section details how to configure OpenUnison.

=== Deploy Reverse Proxy

==== Create a Maven Project
As stated above, OpenUnison is most easily deployed using a Maven project.  The first step is to create a simple web application project:

.Create Simple Maven Project
[source,bash]
----
$ mvn archetype:generate -DgroupId=com.mycompany.openunison -DartifactId=openunison -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp
$ rm openunison/src/main/webapp/index.jsp
$ rm openunison/src/main/webapp/WEB-INF/web.xml
----

Once the project is created, add the Tremolo Security repository, dependencies and overlay plugin:

.Tremolo Security Repository
[source,xml]
----
<repositories>
        <repository>
                <id>Tremolo Security</id>
                <url>https://www.tremolosecurity.com/nexus/content/repositories/releases/</url>
        </repository>
</repositories>
----

.OpenUnison Dependencies
[source,xml]
----
<dependencies>
	<dependency>
		<groupId>com.tremolosecurity.unison</groupId>
		<artifactId>open-unison-webapp</artifactId>
		<version>1.0.6</version>
		<type>war</type>
		<scope>runtime</scope>

	</dependency>
	<dependency>
		<groupId>com.tremolosecurity.unison</groupId>
		<artifactId>open-unison-webapp</artifactId>
		<version>1.0.6</version>
		<type>pom</type>
	</dependency>
</dependencies>
----

.OpenUnison Overlay Plugin
[source,xml]
----
<build>
	<plugins>
		<plugin>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.1</version>
			<configuration>
				<source>1.7</source>
				<target>1.7</target>
			</configuration>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>2.6</version>
			<configuration>

				<overlays>
					<overlay>
						<groupId>com.tremolosecurity.unison</groupId>
						<artifactId>open-unison-webapp</artifactId>
					</overlay>
				</overlays>
			</configuration>
		</plugin>
	</plugins>
</build>
----

If everything is configured correctly, when your run the package artifact with Maven the target directory will contain a war file that contains the OpenUnison files including JSPs and
libraries.

==== Create the Key Store

All certificates and keys are stored in a key store called unisonKeyStore.jks.  They key store MUST:


* Be a Java Extended Key Store (JCEKS)
* All key passwords must match the key store password

[source, bash]
----
$ keytool -genseckey -alias session-unison -keyalg AES -keysize 256 -storetype JCEKS -keystore src/main/webapp/WEB-INF/unisonKeyStore.jks
Enter keystore password:  
Re-enter new password: 
Enter key password for <session-unison>
	(RETURN if same as keystore password):   
----

This command created a secret key, a static AES256 key.  This generates the key store as well.  The key that we generated will be used for the session we create.

==== Virtual Directory Configuration

OpenUnison uses an embedded version of MyVirtualDirectory to work with user data.  This allows OpenUnison
to work with LDAP directories, databases, Active Directory, web services, etc.  It also provides a powerful mechanism for manipulating identity data.  For instance you
can add attributes to an Active Directory forest without changing the schema.  There are two roots that should be used:

* ou=Tremolo - This is where OpenUnison will look for identity data
* ou=Data - This is where directories may be configured that OpenUnison won't look for identity data

The ou=Data root is useful for configuring joins where the directories being joined are configured under ou=Data and the joiner is configured under ou=Tremolo.  Create a text file called
myvd.props with the following content:

[source,properties]
----
#Global AuthMechConfig
server.globalChain=

server.nameSpaces=rootdse,myvdroot
server.rootdse.chain=dse
server.rootdse.nameSpace=
server.rootdse.weight=0
server.rootdse.dse.className=net.sourceforge.myvd.inserts.RootDSE
server.rootdse.dse.config.namingContexts=o=Tremolo
server.myvdroot.chain=root
server.myvdroot.nameSpace=o=Tremolo
server.myvdroot.weight=0
server.myvdroot.root.className=net.sourceforge.myvd.inserts.RootObject
----

See MyVirtualDirectory's website (http://myvd.sourceforge.net/) for information on how to configure MyVirtualDirectory.


==== Create the OpenUnison XML File

OpenUnison's unison.xml file drives most of the configuration options.  This file is based on an annotated XML Schema file.  While not required, its recommended that the schema file
be used when creating the unison.xml file.  If using an editor such as Eclipse the schema file will make it much easier to navigate the configuration options.  The easiest way to get this file
is to copy it from the build i

[source,bash]
----
$ cp target/war/work/com.tremolosecurity.unison/open-unison-webapp/WEB-INF/tremoloConfig.xsd src/main/webapp/WEB-INF/
----

Once the file is copied, you can create a unison.xml file from the schema file.  At a minimum you must set the myvdConfig, keyStorePath and keyStorePassword elements:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<tns:tremoloConfig xmlns:tns="http://www.tremolosecurity.com/tremoloConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.tremolosecurity.com/tremoloConfig tremoloConfig.xsd ">
  <tns:applications/>
  <tns:myvdConfig>WEB-INF/myvd.conf</tns:myvdConfig>
  <tns:authMechs/>
  <tns:authChains/>
  <tns:resultGroups/>
  <tns:keyStorePath>WEB-INF/unisonKeyStore.jks</tns:keyStorePath>
  <tns:keyStorePassword>password</tns:keyStorePassword>
</tns:tremoloConfig>
----

At this point, OpenUnison has a minimum configuration for deployment.

=== Deploy Web Services

== Configuring OpenUnison

== Configuration Reference
=== MyVD Inserts
=== Authentication Mechanisms
=== Provisioning Tasks
=== Provisioning Custom Tasks
=== Message Listeners
=== Scheduled Jobs