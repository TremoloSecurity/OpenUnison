= Tremolo Security ScaleJS Token Provider Configuration & Deployment
Tremolo Security, Inc
v1.0.6, 2016-03-21
:toc: left
:source-highlighter: coderay

Copyright 2015-2016, Tremolo Security, Inc.

== Introduction

The ScaleJS token provider application is designed to provide session length tokens to users.  These tokens can be temporary passwords,
API keys, etc.  In order to load these tokens, a class must be created that implements the `com.tremolosecurity.scalejs.token.sdk.TokenLoader`
interface.  This tells Unison how to retrieve the token.

== Design

ScaleJS Token Provider has three components outside of Unison:

1. Unison HttpFilter implementation for all web services
2. AngularJS application that interacts with those web services
3. An implementation of `com.tremolosecurity.scalejs.token.sdk.TokenLoader`

The `TokenLoader` interface is used to load a token for use by the currently authenticated user.  Whatever object
is returned from `TokenLoader.loadToken` is sent back to the client and displayed to the user.  Specific implementations
are detailed below.

== Deployment

=== Prerequisites

1.  OpenUnison has been deployed following the Maven based directions for the reverse proxy
2.  While using the reverse proxy based overlay, the provisioning services (auditDB, queue, scheduler, etc) have been configured
3.  Download the latest ScaleJS HTML from http://tremolo.io

=== Deployment Steps

==== Update Your Maven Project

In your OpenUnison project's pom.xml, add the following dependency:

[source,xml]
----
<dependency>
  <groupId>com.tremolosecurity.unison</groupId>
  <artifactId>unison-scalejs-token</artifactId>
  <version>1.0.6</version>
  <type>jar</type>
</dependency>
----

==== Add ScaleJS Token files

Copy the application files into a directory.  For the rest of this tutorial we will assume the directory is called "/scale-token".  NOTE: all needed files are included, there's no
need for ScaleJS to request additional files over the internet.

==== Create an application

Add an application to unison.xml using the following template:

[source,xml]
----
<application name="Scale" azTimeoutMillis="30000">
  <urls>
    <url regex="false" authChain="adfs" overrideHost="true" overrideReferer="true">
      <host>openunison.azure.cloud</host>
      <filterChain>
      </filterChain>
      <uri>/scale-token</uri>
      <results>
        <auFail>Invalid Login</auFail>
        <azSuccess>
        </azSuccess>
        <azFail>Invalid Login</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>

    <url regex="false" authChain="adfs" overrideHost="true" overrideReferer="true">
      <host>openunison.azure.cloud</host>
      <filterChain>
        <filter class="com.tremolosecurity.prelude.filters.StopProcessing"/>
      </filterChain>
      <uri>/</uri>

      <results>
        <auFail>Invalid Login</auFail>
        <azSuccess>ScaleRedirect</azSuccess>
        <azFail>Invalid Login</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>


    <!-- Web services for the token application -->
    <url regex="false" authChain="adfs" overrideHost="false" overrideReferer="false">
      <host>openunison.azure.cloud</host>
      <filterChain>
        <filter class="com.tremolosecurity.scalejs.token.ws.ScaleToken">
          <!-- The name of the attribute that stores the value to be displayed when referencing the currently logged in user, ie cn or displayName -->
          <param name="displayNameAttribute" value="displayName"/>
          <!-- The title to show on the home page -->
          <param name="frontPage.title" value="Azure Cloud Linux Temporary Password"/>
          <!-- Sub text for the home page -->
          <param name="frontPage.text" value="Use this password for applications that do not support SSO"/>

          <!-- The URL to redirect the user to when they logout -->
          <param name="logoutURL" value="/logout"/>

          <!-- The URL to send users to when they click on "home" -->
          <param name="homeURL" value="/scale/index.html"/>

          <!-- Implementation of the com.tremolosecurity.scalejs.token.sdk.TokenLoader -->
          <param name="tokenClassName" value="com.tremolosecurity.scalejs.token.password.LoadToken" />

          <!-- The following attributes are specific to the password token loader -->
          <!-- Name of the attribute storing the encrypted password -->
          <param name="attributeName" value="carLicense" />
          <!-- Name of the key used to decrypt the stored password -->
          <param name="encryptionKey" value="session-randompwd" />

        </filter>
      </filterChain>
      <uri>/scale-token/token</uri>
      <results>
        <auSuccess>
        </auSuccess>
        <auFail>
        </auFail>
        <azSuccess>
        </azSuccess>
        <azFail>
        </azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>

    <!-- Logout -->
    <url regex="false" authChain="adfs" overrideHost="true" overrideReferer="true">
      <host>openunison.azure.cloud</host>
      <filterChain>
        <filter class="com.tremolosecurity.prelude.filters.StopProcessing"/>
      </filterChain>
      <uri>/logout</uri>
      <proxyTo>http://dnm${fullURI}</proxyTo>
      <results>
        <azSuccess>Logout</azSuccess>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo"/>
      </azRules>
    </url>
  </urls>
  <cookieConfig>
    <sessionCookieName>tremolosession</sessionCookieName>
    <domain>azure.cloud</domain>
    <scope>-1</scope>
    <logoutURI>/logout</logoutURI>
    <keyAlias>session-unison</keyAlias>
    <secure>false</secure>
    <timeout>900</timeout>
  </cookieConfig>
</application>
----

== Token Types

=== Password Token

The password token is designed to allow Unison to create temporary passwords and then display it to the user.  In order for this
token generator to work:

1. Create an encryption key that will be used for encrypting and decrypting the key
2. Create a workflow with the `com.tremolosecurity.scalejs.token.password.SetRandomPassword` custom task
3. Optionally add the `com.tremolosecurity.scalejs.token.password.ResetUserPasswordOnLogout` authentication handler to change the password when the user logs out or their session times out.

.Create The Encryption Key
[source,bash]
----
$ keytool -genseckey -alias session-randompwd -keyalg AES -keysize 256 -storetype JCEKS -keystore /etc/openunison/unisonKeyStore.jks
Enter keystore password:
Re-enter new password:
Enter key password for <session-randompwd>
 (RETURN if same as keystore password):
 .
 .
 .
----

.Example Just-In-Time Workflow with SetRandomPassword
[source,xml]
----
<workflow name="ipa-jit" label="" description="" inList="false" orgid="687da09f-8ec1-48ac-b035-f2f182b9bd1e">
  <mapping strict="true">
    <map>
      <mapping targetAttributeName="mail" targetAttributeSource="mail" sourceType="user"/>
      <mapping targetAttributeName="givenName" targetAttributeSource="givenName" sourceType="user"/>
      <mapping targetAttributeName="sn" targetAttributeSource="sn" sourceType="user"/>
      <mapping targetAttributeName="displayName" targetAttributeSource="displayName" sourceType="user"/>
      <mapping targetAttributeName="uid" targetAttributeSource="uid" sourceType="user"/>
    </map>
    <customTask className="com.tremolosecurity.scalejs.token.password.SetRandomPassword">
      <!-- name of the encryption key to use when encrypting the password -->
      <param name="keyName" value="session-randompwd" />
      <!-- attribute to store the key in -->
      <param name="attributeName" value="carlicense" />
    </customTask>
    <provision sync="false" target="freeipa" setPassword="true"/>
    <resync keepExternalAttrs="false" />
  </mapping>
</workflow>
----

.Example Workflow to Clear the User's Password on Logout
[source,xml]
----
<workflow name="reset-password-on-logout" label="Reset password on logout" description="Resets the user's password when the user is logged out" inList="false" orgid="687da09f-8ec1-48ac-b035-f2f182b9bd1e">
  <mapping strict="true">
    <map>
      <mapping targetAttributeName="uid" targetAttributeSource="uid" sourceType="user"/>
    </map>
    <customTask className="com.tremolosecurity.provisioning.customTasks.LoadGroups">
      <!-- The attribute name to search for on the user's account   -->
      <param name="nameAttr" value="uid"/>
      <!-- If set to true, only loads the groups from the virtual directory that the user's object is NOT already a member of               -->
      <param name="inverse" value="false"/>
    </customTask>
    <customTask className="com.tremolosecurity.provisioning.customTasks.LoadAttributes">
      <!-- An attribute name to load, case sensitive and can be listed multiple times       -->
      <param name="name" value="givenname"/>
      <param name="name" value="sn"/>
      <param name="name" value="mail"/>
      <param name="name" value="displayname"/>
      <param name="name" value="gecos"/>

      <param name="nameAttr" value="uid"/>
    </customTask>
    <customTask className="com.tremolosecurity.scalejs.token.password.SetRandomPassword">
      <param name="keyName" value="session-randompwd" />
      <param name="attributeName" value="carlicense" />
    </customTask>
    <provision sync="false" target="freeipa" setPassword="true"/>
  </mapping>

</workflow>
----

.Example Authentication Chain to Reset Password on Logout
[source,xml]
----
<authMechs>
.
.
.
<mechanism name="resetpw">
  <uri>/auth/clearpwd</uri>
  <className>com.tremolosecurity.scalejs.token.password.RegisterPasswordResetAuth</className>
  <init>
    <param name="workflowName" value="reset-password-on-logout" />
    <param name="uidAttributeName" value="uid" />
  </init>
  <params>
  </params>
</mechanism>
</authMechs>
<authChains>
.
.
.
<chain name="adfs" level="20">
  <authMech>
    <name>SAML2</name>
    <required>required</required>
    <params>
      <param name="entityID" value="https://idp.ent2k12.domain.com/adfs/services/trust"/>
      <param name="idpRedirURL" value="https://idp.ent2k12.domain.com/adfs/ls/"/>
      <param name="idpURL" value="https://idp.ent2k12.domain.com/adfs/ls/"/>
      <param name="idpRedirLogoutURL" value="https://idp.ent2k12.domain.com/adfs/ls/"/>
      <param name="idpSigKeyName" value="verify-https://idp.ent2k12.domain.com/adfs/services/trust-idp-sig"/>
      <param value="uid" name="ldapAttribute" />
      <param value="ADFS" name="dnOU" />
      <param value="inetOrgPerson" name="defaultOC" />
      <param name="authCtxRef" value="urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"/>
      <param name="spSigKey" value="unison-tls" />
      <param name="logoutURL" value="https://openunison.azure.cloud/auth/forms/logout.jsp" />
      <param name="sigAlg" value="RSA-SHA256" />
      <param name="signAuthnReq" value="true"/>
      <param name="assertionsSigned" value="true" />
      <param name="responsesSigned" value="false" />
      <param name="assertionEncrypted" value="false" />
      <param name="spEncKey" value="" />
      <param name="forceToSSL" value="false" />
      <param name="jumpPage" value="" />
      <param name="dontLinkToLDAP" value="true" />
    </params>
  </authMech>
  <authMech>
    <name>jit</name>
    <required>required</required>
    <params>
      <!-- The name of the attribute that will be used as the user identifier-->
      <param name="nameAttr" value="uid" />
      <!-- The name of the workflow -->
      <param name="workflowName" value="ipa-jit" />
    </params>
  </authMech>
  <authMech>
    <name>resetpw</name>
    <required>required</required>
    <params />
  </authMech>
</chain>
</authChains>
----

== Web Services Descriptions

All URLs assume that scale's filter is deployed to /scale-token.

=== Get Configuration

|=======================
|Purpose|Retrieves the configuration for ScaleJS
|URI|/scale-token/token/config
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "frontPage": {
    "title": "Azure Cloud Linux Temporary Password",
    "text": "Use this password for applications that do not support SSO"
  },
  "logoutURL": "\/logout",
  "homeURL": "\/scale\/index.html"
}
----

=== Get User

|=======================
|Purpose|Retrieves the user and token
|URI|/scale-token/token/user
|Method|Get
|=======================

.Example Return
[source,json]
----
{
  "displayName": "Matthew Mosley",
  "token": {
    "Temporary Password": "rgQAJvgT7vR7fiswKPLmw==:JboMmF3nQ49Sjzt0ynsN+dKB09McaIisvM3EBYivIeo="
  }
}
----
